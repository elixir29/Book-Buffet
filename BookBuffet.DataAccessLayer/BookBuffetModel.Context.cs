//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BookBuffet.DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BookBuffetEntities : DbContext
    {
        public BookBuffetEntities()
            : base("name=BookBuffetEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<Event> Event { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<User> User { get; set; }
    
        public virtual int uspAddEvent(string eventTitle, string eventLocation, Nullable<System.TimeSpan> eventTime, Nullable<System.DateTime> eventDate, Nullable<int> eventDuration, string eventType, string eventDescription, string eventDetails, string eventInvite, Nullable<int> userId)
        {
            var eventTitleParameter = eventTitle != null ?
                new ObjectParameter("EventTitle", eventTitle) :
                new ObjectParameter("EventTitle", typeof(string));
    
            var eventLocationParameter = eventLocation != null ?
                new ObjectParameter("EventLocation", eventLocation) :
                new ObjectParameter("EventLocation", typeof(string));
    
            var eventTimeParameter = eventTime.HasValue ?
                new ObjectParameter("EventTime", eventTime) :
                new ObjectParameter("EventTime", typeof(System.TimeSpan));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var eventDurationParameter = eventDuration.HasValue ?
                new ObjectParameter("EventDuration", eventDuration) :
                new ObjectParameter("EventDuration", typeof(int));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("EventDescription", eventDescription) :
                new ObjectParameter("EventDescription", typeof(string));
    
            var eventDetailsParameter = eventDetails != null ?
                new ObjectParameter("EventDetails", eventDetails) :
                new ObjectParameter("EventDetails", typeof(string));
    
            var eventInviteParameter = eventInvite != null ?
                new ObjectParameter("EventInvite", eventInvite) :
                new ObjectParameter("EventInvite", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddEvent", eventTitleParameter, eventLocationParameter, eventTimeParameter, eventDateParameter, eventDurationParameter, eventTypeParameter, eventDescriptionParameter, eventDetailsParameter, eventInviteParameter, userIdParameter);
        }
    }
}
